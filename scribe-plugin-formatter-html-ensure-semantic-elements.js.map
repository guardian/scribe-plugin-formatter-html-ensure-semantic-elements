{"version":3,"file":"scribe-plugin-formatter-html-ensure-semantic-elements.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../src/scribe-plugin-formatter-html-ensure-semantic-elements.js"],"sourcesContent":["/**\n * Plugin to replace unsemantic HTML tags with semantic ones\n *\n * Currently replaces:\n * B => STRONG\n * I => EM\n *\n */\ndefine('scribe-plugin-formatter-html-ensure-semantic-elements',[],function () {\n\n    'use strict';\n\n    return function () {\n        return function (scribe) {\n            var map = {\n                'B': 'strong',\n                'I': 'em'\n            };\n\n            /**\n             * Moves the children elements from one node into another\n             * @param fromNode  {HTMLElement}  source node\n             * @param toNode    {HTMLElement}  destination node\n             */\n            function moveChildren(fromNode, toNode) {\n                var nextChild;\n                var child = fromNode.firstChild;\n                while (child) {\n                    nextChild = child.nextSibling;\n                    toNode.appendChild(child);\n                    child = nextChild;\n                }\n            }\n\n            /**\n             * Copies the attributes from one node to another\n             * @param fromNode  {HTMLElement}  source node\n             * @param toNode    {HTMLElement}  destination node\n             */\n            function copyAttributes(fromNode, toNode) {\n                if (fromNode.hasAttributes()) {\n                    for (var i = 0, ii = fromNode.attributes.length; i < ii; i++) {\n                        var attr = fromNode.attributes[i].cloneNode(false);\n                        toNode.attributes.setNamedItem(attr);\n                    }\n                }\n            }\n\n            /**\n             * Replaces a node with a new node of different name\n             * @param node      {HTMLElement} node to replace\n             * @param nodeName  {String}      name of the new node\n             */\n            function replaceNode(node, nodeName) {\n                var newNode = document.createElement(nodeName);\n                moveChildren(node, newNode);\n                copyAttributes(node, newNode);\n                node.parentNode.replaceChild(newNode, node);\n            }\n\n            /**\n             * Recursively traverse the tree replacing unsemantic nodes with semantic version\n             * @param parentNode  {HTMLElement}\n             */\n            function traverse(parentNode) {\n                var el = parentNode.firstElementChild;\n                var nextSibling;\n                while (el) {\n                    nextSibling = el.nextElementSibling;\n                    traverse(el);\n                    var nodeName = map[el.nodeName];\n                    if (nodeName) {\n                        replaceNode(el, nodeName);\n                    }\n                    el = nextSibling;\n                }\n            }\n\n            scribe.registerHTMLFormatter('normalize', function (html) {\n                if (typeof html === 'string') {\n                    var node = document.createElement('div');\n                    node.innerHTML = html;\n                    traverse(node);\n                    return node.innerHTML;\n                } else {\n                    traverse(html);\n                    return html\n                }\n            });\n        };\n    };\n\n});\n\n"],"names":[]}